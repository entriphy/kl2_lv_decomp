cmake_minimum_required(VERSION 3.17)
project(kl2_lv_decomp LANGUAGES CXX C ASM)

set(INCLUDE_DIR "include")

# PS2 SDK
if(DEFINED ENV{SCESDK})
    SET(SCESDK $ENV{SCESDK})
    SET(SCE ON)
    message(NOTICE "Using SCE PS2 SDK!")
elseif(DEFINED ENV{PS2DEV})
    SET(PS2DEV $ENV{PS2DEV})
    SET(PS2SDK $ENV{PS2SDK})
    SET(SCE OFF)
else()
    message(FATAL_ERROR "SCESDK or PS2DEV/PS2SDK needs to be defined.")
endif()

SET(CMAKE_SYSTEM_NAME Generic)
SET(CMAKE_SYSTEM_VERSION 1)
SET(CMAKE_SYSTEM_PROCESSOR mips)

SET(PLATFORM_PS2 TRUE)
SET(PS2 TRUE)

if(${SCE})
    SET(CMAKE_C_COMPILER ${SCESDK}/ee/gcc/bin/ee-gcc)
    SET(CMAKE_CXX_COMPILER ${SCESDK}/ee/gcc/bin/ee-g++)
    SET(CMAKE_ASM_COMPILER ${SCESDK}/ee/gcc/bin/ee-gcc)
    add_compile_options(-O1 -G0 -g2 -gdwarf-2 -std=c99 -U__STRICT_ANSI__)
    add_compile_definitions(SCE)
    add_link_options(-T${SCESDK}/ee/lib/app.cmd -Wall -Werror -Wa,-al -fno-common -mno-crt0)
    include_directories(${SCESDK}/common/include ${SCESDK}/ee/include include)
    link_directories(${SCESDK}/ee/lib)
    link_libraries(m cdvd graph dma vu0 dev)
else()
    SET(CMAKE_C_COMPILER ${PS2DEV}/ee/bin/mips64r5900el-ps2-elf-gcc)
    SET(CMAKE_CXX_COMPILER ${PS2DEV}/ee/bin/mips64r5900el-ps2-elf-g++)
    add_compile_options(-O1 -G0 -g2 -gdwarf-2 -gstrict-dwarf -Wno-strict-aliasing)
    add_compile_definitions(_EE PS2 __PS2__)
    add_link_options(-T${PS2SDK}/ee/startup/linkfile -Wl,-zmax-page-size=128 -lvux -ldebug -lc -lcdvd -lxcdvd)
    include_directories(${PS2SDK}/common/include ${PS2SDK}/ee/include include)
    link_directories(${PS2SDK}/ee/lib)
    link_libraries(vux debug cdvd xcdvd dma gs)
endif()

# Decomp
set(EXECUTABLES src/main.c src/common.c src/compression.c src/gim.c src/ps2.c)
if(${SCE})
    list(PREPEND EXECUTABLES ${SCESDK}/ee/lib/crt0.s)
    set_source_files_properties(${SCESDK}/ee/lib/crt0.s PROPERTIES COMPILE_FLAGS "-x assembler-with-cpp")
endif()

set(SUBDIRS abe harada hato hoshino kazuya nakano okanoyo take assorted)
foreach (SUBDIR IN LISTS SUBDIRS)
    file(GLOB files src/${SUBDIR}/*.c)
    foreach (file ${files})
        list(APPEND EXECUTABLES ${file})
    endforeach()

    file(GLOB files src/${SUBDIR}/*.cpp)
    foreach (file ${files})
        list(APPEND EXECUTABLES ${file})
    endforeach()
endforeach()

add_executable(${PROJECT_NAME} ${EXECUTABLES})
set(CMAKE_EXECUTABLE_SUFFIX ".elf")
set(CMAKE_EXECUTABLE_SUFFIX_C "${CMAKE_EXECUTABLE_SUFFIX}")
set(CMAKE_EXECUTABLE_SUFFIX_CXX "${CMAKE_EXECUTABLE_SUFFIX}")
